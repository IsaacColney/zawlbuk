{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { USER_LOADED, AUTH_ERROR } from './types';\nimport setAuthToken from '../utils/setAuthToken';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_FAIL, LOGIN_SUCCESS, LOGOUT, CLEAR_PROFILE } from './types';\nexport const loaduser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get('/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loaduser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/auth', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loaduser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/home/bta/mizoscholar/client/src/actions/auth.js"],"names":["axios","setAlert","USER_LOADED","AUTH_ERROR","setAuthToken","REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_FAIL","LOGIN_SUCCESS","LOGOUT","CLEAR_PROFILE","loaduser","dispatch","localStorage","token","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","login","logout"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {setAlert} from './alert';\nimport {USER_LOADED,AUTH_ERROR} from './types';\nimport setAuthToken from '../utils/setAuthToken';\nimport {\n    REGISTER_SUCCESS,\n    REGISTER_FAIL,\n    LOGIN_FAIL,\n    LOGIN_SUCCESS,\n    LOGOUT,\n    CLEAR_PROFILE\n} from './types';\nexport const loaduser = () => async dispatch => {\n    if(localStorage.token){\n        setAuthToken(localStorage.token)\n    }\n    try{\n        const res = await axios.get('/api/auth')\n        dispatch({\n            type:USER_LOADED,\n            payload:res.data\n\n        })\n    }\n    catch(err){\n        dispatch({\n            type:AUTH_ERROR\n        })\n    }\n}\nexport const register = ({name,email,password}) => async dispatch => {\n    const config = {\n        headers:{\n            'Content-type':'application/json'\n        }\n    }\n    const body = JSON.stringify({name,email,password});\n    try{\n        const res = await axios.post('/api/users',body,config);\n        dispatch({\n            type:REGISTER_SUCCESS,\n            payload:res.data\n        });\n        dispatch(loaduser());\n    } \n    catch(err){\n        const errors = err.response.data.errors;\n        if(errors){\n            errors.forEach(error => dispatch(setAlert(error.msg,\"danger\")))\n        }\n        dispatch({\n            type:REGISTER_FAIL\n        })\n    }\n}\n\nexport const login = (email,password) => async dispatch => {\n    const config = {\n        headers:{\n            'Content-type':'application/json'\n        }\n    }\n    const body = JSON.stringify({email,password});\n    try{\n        const res = await axios.post('/api/auth',body,config);\n        dispatch({\n            type:LOGIN_SUCCESS,\n            payload:res.data\n        });\n        dispatch(loaduser());\n    } \n    catch(err){\n        const errors = err.response.data.errors;\n        if(errors){\n            errors.forEach(error => dispatch(setAlert(error.msg,\"danger\")))\n        }\n        dispatch({\n            type:LOGIN_FAIL\n        })\n    }\n}\nexport const logout = () => dispatch => {\n    dispatch({\n        type:CLEAR_PROFILE\n    })\n    dispatch({\n        type:LOGOUT\n    });\n}"]},"metadata":{},"sourceType":"module"}
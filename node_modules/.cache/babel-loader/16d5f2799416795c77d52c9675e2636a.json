{"ast":null,"code":"var _jsxFileName = \"/home/bta/mizoscholar/client/src/components/post/Post.js\";\nimport React, { useEffect, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport Spinner from '../Layout/Spinner';\nimport { getPost } from '../../actions/post';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport Moment from 'react-moment';\nimport Button from '../Button';\nimport DelButton from '../DeleteButton';\nimport { starPost, unstarPost, deletepost } from '../../actions/post';\n\nconst Post = ({\n  post: {\n    post: {\n      _id,\n      text,\n      name,\n      title,\n      avatar,\n      stars,\n      date,\n      comments,\n      user\n    },\n    loading\n  },\n  getPost,\n  match\n}) => {\n  useEffect(() => {\n    getPost(match.params.id);\n  }, [getPost]);\n  return loading || post == null ? /*#__PURE__*/React.createElement(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 36\n    }\n  }) : /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 49\n    }\n  });\n};\n\nPost.propTypes = {\n  getPost: PropTypes.func.isRequired,\n  post: PropTypes.object.isRequired\n};\n\nconst mapstatetoprops = state => ({\n  post: state.post\n});\n\nexport default connect(mapstatetoprops, {\n  getPost\n})(Post);","map":{"version":3,"sources":["/home/bta/mizoscholar/client/src/components/post/Post.js"],"names":["React","useEffect","Fragment","connect","Spinner","getPost","PropTypes","Link","Moment","Button","DelButton","starPost","unstarPost","deletepost","Post","post","_id","text","name","title","avatar","stars","date","comments","user","loading","match","params","id","propTypes","func","isRequired","object","mapstatetoprops","state"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,EAAyBC,QAAzB,QAAwC,OAAxC;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAAQC,OAAR,QAAsB,oBAAtB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,SAAQC,QAAR,EAAiBC,UAAjB,EAA4BC,UAA5B,QAA6C,oBAA7C;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAACC,EAAAA,IAAI,EAAC;AAACA,IAAAA,IAAI,EAAC;AAACC,MAAAA,GAAD;AAAKC,MAAAA,IAAL;AAAUC,MAAAA,IAAV;AAAeC,MAAAA,KAAf;AAAqBC,MAAAA,MAArB;AAA4BC,MAAAA,KAA5B;AAAkCC,MAAAA,IAAlC;AAAuCC,MAAAA,QAAvC;AAAgDC,MAAAA;AAAhD,KAAN;AAA4DC,IAAAA;AAA5D,GAAN;AAA2EpB,EAAAA,OAA3E;AAAmFqB,EAAAA;AAAnF,CAAD,KAA+F;AACxGzB,EAAAA,SAAS,CAAC,MAAI;AACVI,IAAAA,OAAO,CAACqB,KAAK,CAACC,MAAN,CAAaC,EAAd,CAAP;AACH,GAFQ,EAEP,CAACvB,OAAD,CAFO,CAAT;AAGA,SAAOoB,OAAO,IAAIV,IAAI,IAAE,IAAjB,gBAAwB,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAxB,gBAAqC,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA5C;AAIH,CARD;;AAUAD,IAAI,CAACe,SAAL,GAAiB;AACbxB,EAAAA,OAAO,EAACC,SAAS,CAACwB,IAAV,CAAeC,UADV;AAEbhB,EAAAA,IAAI,EAACT,SAAS,CAAC0B,MAAV,CAAiBD;AAFT,CAAjB;;AAIA,MAAME,eAAe,GAAGC,KAAK,KAAK;AAC9BnB,EAAAA,IAAI,EAACmB,KAAK,CAACnB;AADmB,CAAL,CAA7B;;AAIA,eAAeZ,OAAO,CAAC8B,eAAD,EAAiB;AAAC5B,EAAAA;AAAD,CAAjB,CAAP,CAAmCS,IAAnC,CAAf","sourcesContent":["import React,{useEffect, Fragment} from 'react';\nimport {connect} from 'react-redux';\nimport Spinner from '../Layout/Spinner';\nimport {getPost} from '../../actions/post';\nimport PropTypes from 'prop-types';\nimport {Link} from 'react-router-dom';\nimport Moment from 'react-moment';\nimport Button from '../Button';\nimport DelButton from '../DeleteButton';\nimport {starPost,unstarPost,deletepost} from '../../actions/post';\n\nconst Post = ({post:{post:{_id,text,name,title,avatar,stars,date,comments,user},loading},getPost,match}) => {\n    useEffect(()=>{\n        getPost(match.params.id);\n    },[getPost])\n    return loading || post==null ? <Spinner/> :(<Fragment>\n\n    </Fragment>)\n        \n}\n\nPost.propTypes = {\n    getPost:PropTypes.func.isRequired,\n    post:PropTypes.object.isRequired,\n}\nconst mapstatetoprops = state => ({\n    post:state.post\n})\n\nexport default connect(mapstatetoprops,{getPost})(Post);\n"]},"metadata":{},"sourceType":"module"}
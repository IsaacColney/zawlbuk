{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport setAuthToken from '../utils/setAuthToken';\nimport { REGISTER_SUCCESS, REGISTER_FAIL } from './types';\nexport const loaduser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n};\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('/api/users', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["/home/bta/mizoscholar/client/src/actions/auth.js"],"names":["axios","setAlert","setAuthToken","REGISTER_SUCCESS","REGISTER_FAIL","loaduser","dispatch","localStorage","token","register","name","email","password","config","headers","body","JSON","stringify","res","post","type","payload","data","err","errors","response","forEach","error","msg"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,QAAuB,SAAvB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,SACIC,gBADJ,EAEIC,aAFJ,QAGO,SAHP;AAIA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAMC,QAAN,IAAkB;AAC5C,MAAGC,YAAY,CAACC,KAAhB,EAAsB;AAClBN,IAAAA,YAAY,CAACK,YAAY,CAACC,KAAd,CAAZ;AACH;AACJ,CAJM;AAKP,OAAO,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAMC,EAAAA,KAAN;AAAYC,EAAAA;AAAZ,CAAD,KAA2B,MAAMN,QAAN,IAAkB;AACjE,QAAMO,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAC;AACJ,sBAAe;AADX;AADG,GAAf;AAKA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAACP,IAAAA,IAAD;AAAMC,IAAAA,KAAN;AAAYC,IAAAA;AAAZ,GAAf,CAAb;;AACA,MAAG;AACC,UAAMM,GAAG,GAAG,MAAMlB,KAAK,CAACmB,IAAN,CAAW,YAAX,EAAwBJ,IAAxB,EAA6BF,MAA7B,CAAlB;AACAP,IAAAA,QAAQ,CAAC;AACLc,MAAAA,IAAI,EAACjB,gBADA;AAELkB,MAAAA,OAAO,EAACH,GAAG,CAACI;AAFP,KAAD,CAAR;AAIH,GAND,CAOA,OAAMC,GAAN,EAAU;AACN,UAAMC,MAAM,GAAGD,GAAG,CAACE,QAAJ,CAAaH,IAAb,CAAkBE,MAAjC;;AACA,QAAGA,MAAH,EAAU;AACNA,MAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAIrB,QAAQ,CAACL,QAAQ,CAAC0B,KAAK,CAACC,GAAP,EAAW,QAAX,CAAT,CAAhC;AACH;;AACDtB,IAAAA,QAAQ,CAAC;AACLc,MAAAA,IAAI,EAAChB;AADA,KAAD,CAAR;AAGH;AACJ,CAvBM","sourcesContent":["import axios from 'axios';\nimport {setAlert} from './alert';\nimport setAuthToken from '../utils/setAuthToken';\nimport {\n    REGISTER_SUCCESS,\n    REGISTER_FAIL\n} from './types';\nexport const loaduser = () => async dispatch => {\n    if(localStorage.token){\n        setAuthToken(localStorage.token)\n    }\n}\nexport const register = ({name,email,password}) => async dispatch => {\n    const config = {\n        headers:{\n            'Content-type':'application/json'\n        }\n    }\n    const body = JSON.stringify({name,email,password});\n    try{\n        const res = await axios.post('/api/users',body,config);\n        dispatch({\n            type:REGISTER_SUCCESS,\n            payload:res.data\n        })\n    } \n    catch(err){\n        const errors = err.response.data.errors;\n        if(errors){\n            errors.forEach(error => dispatch(setAlert(error.msg,\"danger\")))\n        }\n        dispatch({\n            type:REGISTER_FAIL\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}